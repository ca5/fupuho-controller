/*
<metadata description="slic4live controller 4x4" details="slicd4live controller 4x4" target="Lightpad" tags="MIDI;Controller">
    <groups>
      <group name="colours" displayName="Colours" />
    </groups>

    <variables>
      <variable name="channel" displayName="MIDI Channel" type="int" min="1" max="16" value="1" displayMode="stepper" tooltip="The MIDI channel that values are sent on" />
      <!--
      <variable name="toggleColourOn"  displayName="Toggle On Colour" group="colours" type="colour" value="0xff00ff00" />
      <variable name="toggleColourOff"  displayName="Toggle Off Colour" group="colours" type="colour" value="0xff808080" />
      <variable name="padColour"  displayName="Pad Colour" group="colours" type="colour" value="0xff0000ff" />
      -->
    </variables>
</metadata>
*/
int buttonWidth, buttonSpacing;
int gridSize, maxButtonIndex, maxToggleIndex;
int toggleStates[16]; // Array to store toggle states for the first column
int touchedFunctions[10]; //10は仮
int selectedOption;
int midiCcOffset;
float cursorX, cursorY, cursorZ;
bool isPad;
bool settingButton;

int touchdebug1, touchdebug2, touchdebug3;
int mididebug1, mididebug2, mididebug3;

int round (float num)
{
    int iNum = int (num);
    float res = num - iNum;
    
    if (res > 0.5)
        return iNum + 1;
        
    return iNum;
}

//==============================================================================
int getButtonOnColour (int buttonIndex)
{
    if (buttonIndex < maxToggleIndex) {
        return 0xff00ff00; // Green
    } else {
        return 0xff0000ff; // Blue
    }
}

int getButtonOffColour (int buttonIndex)
{
    if (buttonIndex < maxToggleIndex) {
        return 0xff808080; // Gray
    } else {
        return 0xff202020; // Gray
    }
}

//==============================================================================
int getFunctionIndex (float x, float y)
{
  // 座標補正 → 15x15
  int xx = int (x * (0.95 / 2.0) * 15.0);
  int yy = int (y * (0.95 / 2.0) * 15.0);

  // gridSize x gridSize 座標に変換
  int gridX = xx / gridSize;
  int gridY = yy / gridSize;


  // Calculate the button index (0-15)
  if (gridY == 0 && gridX < 4){
    // 0 - 3
    return gridX
  } else if (gridX == 3){
    // 4 - 6
    return gridX + gridY;
  } else {
    return 7;
  }
}

//==============================================================================
void drawButton (int x, int y, int colour, int state)
{
  int w = buttonWidth;
  if (state) {
    blendGradientRect(colour, //fixme
                      colour & 0xff202020,
                      colour & 0xf0101010,
                      colour & 0xff202020,
                      x * (buttonWidth + 1), y * (buttonWidth + 1), w, w);
  }else{
        blendCircle(colour,
                    float(x) * float(buttonWidth) + float(buttonSpacing * x) + w / 2.0 - 0.5,
                    float(y) * float(buttonWidth) + float(buttonSpacing * y) + w / 2.0 - 0.5,
                    0.5,
                    true);
  }
}

int getButtonX (int buttonIndex)
{
  if (buttonIndex < gridSize) {
    return buttonIndex;
  } else if (buttonIndex < maxButtonIndex){
    return gridSize - 1;
  } else {
    return -1;
  }
}

int getButtonY (int buttonIndex)
{
  if (buttonIndex < gridSize) {
    return 0;
  } else if (buttonIndex < maxButtonIndex){
    return buttonIndex - gridSize + 1;
  } else {
    return -1;
  }
}

void drawButtons()
{
  for(int buttonIndex = 0; buttonIndex < maxButtonIndex; ++buttonIndex)
  {
    int colour;
    if (buttonIndex < maxToggleIndex) {
      // Toggle buttons
      colour = toggleStates[buttonIndex] ? getButtonOnColour(buttonIndex) : getButtonOffColour(buttonIndex);
    } else {
      // Select Buttons
      if (buttonIndex == selectedOption + maxToggleIndex){
        colour = getButtonOnColour(buttonIndex);
      }else{
        colour = getButtonOffColour(buttonIndex);
      }
    }
    drawButton (getButtonX(buttonIndex), getButtonY(buttonIndex), colour, toggleStates[buttonIndex]);
  }
}

void drawPad ()
{
  int w = (buttonWidth + buttonSpacing) * (gridSize - 1) - 1;
  int colour = 0xff808080;
  blendGradientRect(colour, //fixme
                    colour & 0xff202020,
                    colour & 0xf0101010,
                    colour & 0xff202020,
                    1,
                    buttonWidth + buttonSpacing,
                    w,
                    w);
}

void drawCursor (float x, float y, float z)
{
  int colour = 0xff008080;
  blendCircle(colour,
              map(x, 0.0, 2.0, 0.0, 15.0) -0.5,
              map(y, 0.0, 2.0, 0.0, 15.0) -0.5,
              z * 1.8,
              true);
}

//==============================================================================
void initialise()
{
  gridSize = 4;
  maxToggleIndex = 3;
  maxButtonIndex = gridSize * 2 - 1;
  maxButtonIndex = 7;
  buttonWidth = 3; // 3x3 button size
  buttonSpacing = 1; // 1-dot spacing
  isPad = false;
  midiCcOffset = 20;

  // Initialize toggle states to off
  for (int i = 0; i < maxButtonIndex; ++i) {
        toggleStates[i] = 0;
  }

	for (int i = 0; i < 32; ++i)
        setLocalConfigActiveState (i, false, false);
}

//==============================================================================
void repaint()
{
	clearDisplay();

	if (isConnectedToHost())
        drawButtons();
        drawPad();
        if(isPad){
          drawCursor(cursorX, cursorY, cursorZ);
        }
        //debug
        // drawNumber(touchdebug1, 0xffff0000, 0, 0);
        // drawNumber(touchdebug2, 0xff00ff00, 0, 5);
        // drawNumber(touchdebug3, 0xff0000ff, 0, 10);
}

//==============================================================================
void touchStart (int touchIndex, float x, float y, float z, float vz)
{
  touchedFunctions[touchIndex] = getFunctionIndex(x, y);
  if (touchedFunctions[touchIndex] < maxToggleIndex) {
    // Toggle button
    if (settingButton){
      sendCC((channel - 1), selectedOption * 4 + maxButtonIndex + midiCcOffset + touchedFunctions[touchIndex] + 1, 127); // Send CC x,y,z
    } else {
      toggleStates[touchedFunctions[touchIndex]] = 1 - toggleStates[touchedFunctions[touchIndex]]; // Toggle state
      sendCC((channel - 1), touchedFunctions[touchIndex] + midiCcOffset, toggleStates[touchedFunctions[touchIndex]] * 127); // Send CC (20-22)
    }
  } else if (touchedFunctions[touchIndex] < maxButtonIndex) {
    // Select button
    selectedOption = touchedFunctions[touchIndex] - maxToggleIndex;
    for (int i = 0; i < maxButtonIndex - maxToggleIndex; ++i) {
      if (i == selectedOption) {
        sendCC((channel - 1), i + maxToggleIndex + midiCcOffset, 127); // Send CC (23-26)
      } else {
        sendCC((channel - 1), i + maxToggleIndex + midiCcOffset, 0); // Send CC (20-26)
      }
    }
  } else {
    // Pad
    sendCC((channel - 1), selectedOption * 4 + maxButtonIndex + midiCcOffset, 127); // Send CC Pad On/Off
  }
}

void touchMove (int touchIndex, float x, float y, float z, float vz)
{
  touchedFunctions[touchIndex] = getFunctionIndex(x, y);
  if (settingButton){
    // Pad動かさない
  } else if(touchedFunctions[touchIndex] == maxButtonIndex) {
    isPad = true;
    cursorX = x;
    cursorY = y;
    cursorZ = z;
  
    // Pressure-sensitive pad
    int velocity = clamp (0, 127, int (z * 127.0));
    int midiX = 127 - round(map(
              x,
              0.0,
              1.98 - map(float(buttonWidth), 0.0, 14.0, 0.0, 2.0),
              0.0,
              127.0));
    int midiY = 127 - round(map(
              y,
              map(float(buttonWidth + 1), 0.0, 14.0, 0.0, 2.0),
              2.0,
              0.0,
              127.0));
    sendCC((channel - 1), selectedOption * 4 + maxButtonIndex + midiCcOffset + 1, midiX); // Send CC Pad x
    sendCC((channel - 1), selectedOption * 4 + maxButtonIndex + midiCcOffset + 2, midiY); // Send CC Pad y
    sendCC((channel - 1), selectedOption * 4 + maxButtonIndex + midiCcOffset + 3, velocity); // Send CC Pad z
  }
}

void touchEnd (int touchIndex, float x, float y, float z, float vz)
{
  if(touchedFunctions[touchIndex] == maxButtonIndex){
    isPad = false;
    sendCC((channel - 1), selectedOption * 4 + maxButtonIndex + midiCcOffset, 0); // Send CC Pad On/Off
    if (!settingButton){
      sendCC((channel - 1), selectedOption * 4 + maxButtonIndex + midiCcOffset + 1, 0); // Send CC Pad x
      sendCC((channel - 1), selectedOption * 4 + maxButtonIndex + midiCcOffset + 2, 0); // Send CC Pad y
      sendCC((channel - 1), selectedOption * 4 + maxButtonIndex + midiCcOffset + 3, 0); // Send CC Pad z
    }
  }
}


//==============================================================================
void handleMIDI(int byte0, int byte1, int byte2) {
  //mididebug1 = byte0;
  //mididebug2 = byte1;
  //mididebug3 = byte2;
}

void handleButtonDown (int index){
  settingButton = true;
}

void handleButtonUp (int index){
  settingButton = false;
}